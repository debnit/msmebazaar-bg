// /shared/db/schema.prisma

generator client {
  provider = "prisma-client-js"
  // output: individual services will generate their own Prisma clients in their build pipeline
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////////////////////////////
//                 USER & AUTH MODELS                 //
/////////////////////////////////////////////////////////

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  isPro     Boolean  @default(false)
  roles     String[] // List of string roles
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  phone     String?
  avatarUrl String?
  bio       String?
  address   String?
  socialLinks Json?
  user      User     @relation(fields: [userId], references: [id])
}

/////////////////////////////////////////////////////////
//                 ADMIN & SYSTEM                     //
/////////////////////////////////////////////////////////

model FeatureToggle {
  id          String   @id @default(uuid())
  featureKey  String   @unique
  enabled     Boolean
  rolesAllowed String[]
  updatedAt   DateTime @updatedAt
}

model SystemLog {
  id      String   @id @default(uuid())
  message String
  level   String
  createdAt DateTime @default(now())
}

/////////////////////////////////////////////////////////
//                NOTIFICATIONS                        //
/////////////////////////////////////////////////////////

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////////////////////////////////////////
//               MSME & BUSINESS                       //
/////////////////////////////////////////////////////////

model MSME {
  id           String   @id @default(uuid())
  ownerId      String
  gstNumber    String   @unique
  businessName String
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  listings     Listing[]
}

model Listing {
  id          String   @id @default(uuid())
  msmeId      String
  title       String
  description String
  msme        MSME     @relation(fields: [msmeId], references: [id])
}

/////////////////////////////////////////////////////////
//           MARKETPLACE/PEOPLE                        //
/////////////////////////////////////////////////////////

model Product {
  id       String   @id @default(uuid())
  sellerId String
  name     String
  price    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Buyer {
  id        String   @id @default(uuid())
  userId    String   @unique
  preference Json
}

model Agent {
  id     String   @id @default(uuid())
  userId String   @unique
  region String
}

/////////////////////////////////////////////////////////
//                  FINANCE                            //
/////////////////////////////////////////////////////////

model LoanApplication {
  id           String   @id @default(uuid())
  userId       String
  loanAmount   Float
  purpose      String
  tenureMonths Int
  documents    Json?
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  orderId   String
  status    String
  amount    Float
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////////////////////////////////////////
//                COMPLIANCE/EXIT                      //
/////////////////////////////////////////////////////////

model ComplianceDoc {
  id        String   @id @default(uuid())
  userId    String
  type      String
  status    String
  documentUrl String?
  createdAt DateTime @default(now())
}

model ExitProgram {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt DateTime @default(now())
}

/////////////////////////////////////////////////////////
//             MATCHMAKING/ML/VALUATION                //
/////////////////////////////////////////////////////////

model RecommendationLog {
  id       String   @id @default(uuid())
  userId   String
  items    Json
  createdAt DateTime @default(now())
}

model ValuationJob {
  id        String   @id @default(uuid())
  businessId String
  metrics    Json
  result     Json?
  createdAt  DateTime @default(now())
}

model Match {
  id        String   @id @default(uuid())
  buyerId   String
  sellerId  String
  score     Float
  createdAt DateTime @default(now())
}

model SearchLog {
  id        String   @id @default(uuid())
  userId    String
  query     String
  results   Json
  createdAt DateTime @default(now())
}

model TransactionMatch {
  id           String   @id @default(uuid())
  transaction1 String
  transaction2 String
  score        Float
  createdAt    DateTime @default(now())
}

model MLJob {
  id         String   @id @default(uuid())
  service    String
  metrics    Json
  status     String
  startedAt  DateTime @default(now())
  endedAt    DateTime?
}

/////////////////////////////////////////////////////////
