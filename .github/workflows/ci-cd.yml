name: CI/CD Pipeline

on:
  push:
    branches: [ rescue-dev ]
  pull_request:
    branches: [ rescue-dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and test shared utilities
  shared:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: shared/package-lock.json
      
      - name: Install dependencies
        run: |
          cd shared
          npm ci
      
      - name: Lint
        run: |
          cd shared
          npm run lint
      
      - name: Build
        run: |
          cd shared
          npm run build

  # Frontend tests and build
  frontend:
    runs-on: ubuntu-latest
    needs: shared
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Lint
        run: |
          cd frontend
          npm run lint
      
      - name: Type check
        run: |
          cd frontend
          npx tsc --noEmit
      
      - name: Run tests
        run: |
          cd frontend
          npm run test
      
      - name: Build
        run: |
          cd frontend
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next

  # Mobile tests
  mobile:
    runs-on: ubuntu-latest
    needs: shared
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json
      
      - name: Install dependencies
        run: |
          cd mobile
          npm ci
      
      - name: Lint
        run: |
          cd mobile
          npm run lint
      
      - name: Type check
        run: |
          cd mobile
          npm run type-check
      
      - name: Run tests
        run: |
          cd mobile
          npm run test

  # API Gateway tests
  api-gateway:
    runs-on: ubuntu-latest
    needs: shared
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api-gateway/package-lock.json
      
      - name: Install dependencies
        run: |
          cd api-gateway
          npm ci
      
      - name: Lint
        run: |
          cd api-gateway
          npm run lint
      
      - name: Build
        run: |
          cd api-gateway
          npm run build
      
      - name: Run tests
        run: |
          cd api-gateway
          npm run test

  # Microservices tests
  microservices:
    runs-on: ubuntu-latest
    needs: shared
    strategy:
      matrix:
        service: [
          auth-service,
          buyer-service,
          seller-service,
          sellerservice,
          agent-service,
          investor-service,
          loan-service,
          msme-service,
          msme-listing-service,
          matchmaking-service,
          search-matchmaking-service,
          recommendation-service,
          notification-service,
          exit-as-a-service,
          compliance-service,
          valuation-service,
          ml-monitoring-service,
          transaction-matching-service,
          user-profile-service,
          payment-service,
          superadmin-service
        ]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          npm ci
      
      - name: Lint
        run: |
          cd services/${{ matrix.service }}
          npm run lint
      
      - name: Build
        run: |
          cd services/${{ matrix.service }}
          npm run build
      
      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          npm run test

  # Build and push Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [frontend, api-gateway, microservices]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Auth Service
        uses: docker/build-push-action@v5
        with:
          context: ./services/auth-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Payment Service
        uses: docker/build-push-action@v5
        with:
          context: ./services/payment-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push User Profile Service
        uses: docker/build-push-action@v5
        with:
          context: ./services/user-profile-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-profile-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Loan Service
        uses: docker/build-push-action@v5
        with:
          context: ./services/loan-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/loan-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment logic here
          # Example: kubectl apply, docker-compose, etc.

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment logic here
          # Example: kubectl apply, docker-compose, etc.
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests"
          # Add smoke test logic here
      
      - name: Notify deployment
        run: |
          echo "Deployment completed successfully"
          # Add notification logic here (Slack, email, etc.)

