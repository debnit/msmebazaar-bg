#!/usr/bin/env node
"use strict";
/**
 * MSMEBazaar Mobile App - PHASE 2 ENHANCEMENT Script
 *
 * This script adds comprehensive role-based screens, payment integration,
 * navigation refactoring, and shared modules integration following the priority order:
 *
 * 1. Register + ForgotPassword screens
 * 2. All role-specific screens (Normal + Pro for all roles)
 * 3. Payment integration files
 * 4. Navigation refactoring
 * 5. Shared modules with frontend webapp
 *
 * Usage: node scaffold-mobile-phase2.ts
 */
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var MONOREPO_ROOT = "/home/deb/projects/msmebazaar-bg/msmebazaar-bg";
var MOBILE_ROOT = path.join(MONOREPO_ROOT, "mobile");
// Additional folders for Phase 2
var additionalFolders = [
    // Payment screens
    "src/screens/Payment",
    // Enhanced role screens
    "src/screens/Roles/User/Free",
    "src/screens/Roles/User/Pro",
    "src/screens/Roles/LoanOnly/Apply",
    "src/screens/Roles/LoanOnly/Status",
    // Stack navigators
    "src/navigation/StackNavigators",
    // Shared modules integration
    "src/modules/shared/BusinessLoans",
    "src/modules/shared/BusinessValuation",
    "src/modules/shared/Compliance",
    "src/modules/shared/ExitStrategy",
    "src/modules/shared/LeadershipTraining",
    "src/modules/shared/MarketLinkage",
    "src/modules/shared/Recommendation",
    "src/modules/shared/Matchmaking",
];
var phase2Files = {
    // ===== PRIORITY 1: Register + ForgotPassword Screens =====
    "src/screens/Auth/RegisterScreen.tsx": "import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n} from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Button } from \"@mobile/components/ui/Button\";\nimport { Card } from \"@mobile/components/ui/Card\";\nimport { apiClient } from \"@mobile/api/apiClient\";\nimport { COLORS, SPACING, TYPOGRAPHY } from \"@mobile/utils/constants\";\n\nexport default function RegisterScreen({ navigation }) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n\n  const handleRegister = async () => {\n    const { name, email, password, confirmPassword } = formData;\n    \n    if (!name || !email || !password) {\n      Alert.alert(\"Error\", \"Please fill in all fields\");\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      Alert.alert(\"Error\", \"Passwords do not match\");\n      return;\n    }\n\n    if (password.length < 6) {\n      Alert.alert(\"Error\", \"Password must be at least 6 characters\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await apiClient.post(\"/auth/register\", { name, email, password });\n      Alert.alert(\n        \"Success\", \n        \"Account created successfully! Please login.\",\n        [{ text: \"OK\", onPress: () => navigation.navigate(\"Login\") }]\n      );\n    } catch (error: any) {\n      Alert.alert(\"Registration Failed\", error.message || \"An error occurred\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateField = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        style={styles.keyboardView}\n      >\n        <ScrollView contentContainerStyle={styles.scrollContent}>\n          <Text style={styles.title}>Join MSMEBazaar</Text>\n          <Text style={styles.subtitle}>Create your account to get started</Text>\n\n          <Card style={styles.card}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Full Name\"\n              value={formData.name}\n              onChangeText={(value) => updateField(\"name\", value)}\n              autoCapitalize=\"words\"\n            />\n\n            <TextInput\n              style={styles.input}\n              placeholder=\"Email\"\n              value={formData.email}\n              onChangeText={(value) => updateField(\"email\", value)}\n              autoCapitalize=\"none\"\n              keyboardType=\"email-address\"\n              autoComplete=\"email\"\n            />\n\n            <TextInput\n              style={styles.input}\n              placeholder=\"Password\"\n              value={formData.password}\n              onChangeText={(value) => updateField(\"password\", value)}\n              secureTextEntry\n            />\n\n            <TextInput\n              style={styles.input}\n              placeholder=\"Confirm Password\"\n              value={formData.confirmPassword}\n              onChangeText={(value) => updateField(\"confirmPassword\", value)}\n              secureTextEntry\n            />\n\n            <Button\n              onPress={handleRegister}\n              title=\"Create Account\"\n              loading={loading}\n              style={styles.registerButton}\n            />\n          </Card>\n\n          <Button\n            onPress={() => navigation.navigate(\"Login\")}\n            title=\"Already have an account? Sign In\"\n            variant=\"ghost\"\n            style={styles.loginButton}\n          />\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    padding: SPACING.lg,\n  },\n  title: {\n    ...TYPOGRAPHY.h1,\n    textAlign: \"center\",\n    color: COLORS.text,\n    marginBottom: SPACING.sm,\n  },\n  subtitle: {\n    ...TYPOGRAPHY.body,\n    textAlign: \"center\",\n    color: COLORS.textSecondary,\n    marginBottom: SPACING.xl,\n  },\n  card: {\n    marginBottom: SPACING.lg,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: \"#e5e7eb\",\n    borderRadius: 6,\n    padding: SPACING.md,\n    marginBottom: SPACING.md,\n    fontSize: 16,\n    backgroundColor: \"#fff\",\n  },\n  registerButton: {\n    marginTop: SPACING.sm,\n  },\n  loginButton: {\n    alignSelf: \"center\",\n  },\n});",
    "src/screens/Auth/ForgotPasswordScreen.tsx": "import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n} from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Button } from \"@mobile/components/ui/Button\";\nimport { Card } from \"@mobile/components/ui/Card\";\nimport { apiClient } from \"@mobile/api/apiClient\";\nimport { COLORS, SPACING, TYPOGRAPHY } from \"@mobile/utils/constants\";\n\nexport default function ForgotPasswordScreen({ navigation }) {\n  const [email, setEmail] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [sent, setSent] = useState(false);\n\n  const handleResetPassword = async () => {\n    if (!email) {\n      Alert.alert(\"Error\", \"Please enter your email address\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await apiClient.post(\"/auth/forgot-password\", { email });\n      setSent(true);\n      Alert.alert(\n        \"Email Sent\",\n        \"If an account with this email exists, you'll receive password reset instructions.\"\n      );\n    } catch (error: any) {\n      Alert.alert(\"Error\", error.message || \"Failed to send reset email\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        style={styles.keyboardView}\n      >\n        <View style={styles.content}>\n          <Text style={styles.title}>Reset Password</Text>\n          <Text style={styles.subtitle}>\n            Enter your email address and we'll send you instructions to reset your password.\n          </Text>\n\n          <Card style={styles.card}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Email\"\n              value={email}\n              onChangeText={setEmail}\n              autoCapitalize=\"none\"\n              keyboardType=\"email-address\"\n              autoComplete=\"email\"\n              editable={!sent}\n            />\n\n            <Button\n              onPress={handleResetPassword}\n              title={sent ? \"Email Sent\" : \"Send Reset Instructions\"}\n              loading={loading}\n              disabled={sent}\n              style={styles.resetButton}\n            />\n          </Card>\n\n          <Button\n            onPress={() => navigation.goBack()}\n            title=\"Back to Login\"\n            variant=\"ghost\"\n            style={styles.backButton}\n          />\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    justifyContent: \"center\",\n    padding: SPACING.lg,\n  },\n  title: {\n    ...TYPOGRAPHY.h1,\n    textAlign: \"center\",\n    color: COLORS.text,\n    marginBottom: SPACING.sm,\n  },\n  subtitle: {\n    ...TYPOGRAPHY.body,\n    textAlign: \"center\",\n    color: COLORS.textSecondary,\n    marginBottom: SPACING.xl,\n    lineHeight: 22,\n  },\n  card: {\n    marginBottom: SPACING.lg,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: \"#e5e7eb\",\n    borderRadius: 6,\n    padding: SPACING.md,\n    marginBottom: SPACING.md,\n    fontSize: 16,\n    backgroundColor: \"#fff\",\n  },\n  resetButton: {\n    marginTop: SPACING.sm,\n  },\n  backButton: {\n    alignSelf: \"center\",\n  },\n});",
    // ===== PRIORITY 2: All Role-Specific Screens =====
    "src/screens/Roles/Seller/Pro/SellerProScreen.tsx": "import React from \"react\";\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Card } from \"@mobile/components/ui/Card\";\nimport { Button } from \"@mobile/components/ui/Button\";\nimport { RoleGuard } from \"@mobile/modules/Shared/RoleGuard\";\nimport { UserRole } from \"@shared/types/feature\";\nimport { COLORS, SPACING, TYPOGRAPHY } from \"@mobile/utils/constants\";\n\nexport default function SellerProScreen({ navigation }) {\n  const proFeatures = [\n    { title: \"Advanced Analytics\", description: \"Detailed sales reports and insights\" },\n    { title: \"Unlimited Listings\", description: \"List as many products as you want\" },\n    { title: \"Priority Support\", description: \"24/7 dedicated customer support\" },\n    { title: \"Bulk Operations\", description: \"Manage multiple products at once\" },\n    { title: \"Export Tools\", description: \"Export data to Excel/CSV\" },\n  ];\n\n  return (\n    <RoleGuard allowedRoles={[UserRole.SELLER]}>\n      <SafeAreaView style={styles.container}>\n        <ScrollView style={styles.scrollView}>\n          <Text style={styles.title}>Seller Pro Dashboard</Text>\n          <Text style={styles.subtitle}>Advanced tools for professional sellers</Text>\n\n          <Card style={styles.statsCard}>\n            <Text style={styles.cardTitle}>Quick Stats</Text>\n            <View style={styles.statsRow}>\n              <View style={styles.statItem}>\n                <Text style={styles.statNumber}>156</Text>\n                <Text style={styles.statLabel}>Total Sales</Text>\n              </View>\n              <View style={styles.statItem}>\n                <Text style={styles.statNumber}>\u20B92.4L</Text>\n                <Text style={styles.statLabel}>Revenue</Text>\n              </View>\n              <View style={styles.statItem}>\n                <Text style={styles.statNumber}>23</Text>\n                <Text style={styles.statLabel}>Active Listings</Text>\n              </View>\n            </View>\n          </Card>\n\n          <Card style={styles.actionsCard}>\n            <Text style={styles.cardTitle}>Quick Actions</Text>\n            <View style={styles.actionGrid}>\n              <TouchableOpacity style={styles.actionItem} onPress={() => navigation.navigate(\"Products\")}>\n                <Text style={styles.actionTitle}>Manage Products</Text>\n                <Text style={styles.actionSubtitle}>Add, edit, delete listings</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity style={styles.actionItem} onPress={() => navigation.navigate(\"Orders\")}>\n                <Text style={styles.actionTitle}>View Orders</Text>\n                <Text style={styles.actionSubtitle}>Track order status</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity style={styles.actionItem}>\n                <Text style={styles.actionTitle}>Analytics</Text>\n                <Text style={styles.actionSubtitle}>Detailed reports</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity style={styles.actionItem}>\n                <Text style={styles.actionTitle}>Bulk Export</Text>\n                <Text style={styles.actionSubtitle}>Download data</Text>\n              </TouchableOpacity>\n            </View>\n          </Card>\n\n          <Card style={styles.featuresCard}>\n            <Text style={styles.cardTitle}>Pro Features</Text>\n            {proFeatures.map((feature, index) => (\n              <View key={index} style={styles.featureItem}>\n                <Text style={styles.featureTitle}>\u2713 {feature.title}</Text>\n                <Text style={styles.featureDescription}>{feature.description}</Text>\n              </View>\n            ))}\n          </Card>\n        </ScrollView>\n      </SafeAreaView>\n    </RoleGuard>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.surface,\n  },\n  scrollView: {\n    flex: 1,\n    padding: SPACING.md,\n  },\n  title: {\n    ...TYPOGRAPHY.h2,\n    color: COLORS.text,\n    marginBottom: SPACING.sm,\n  },\n  subtitle: {\n    ...TYPOGRAPHY.body,\n    color: COLORS.textSecondary,\n    marginBottom: SPACING.lg,\n  },\n  statsCard: {\n    marginBottom: SPACING.md,\n  },\n  cardTitle: {\n    ...TYPOGRAPHY.h3,\n    color: COLORS.text,\n    marginBottom: SPACING.md,\n  },\n  statsRow: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  statItem: {\n    alignItems: \"center\",\n  },\n  statNumber: {\n    ...TYPOGRAPHY.h2,\n    color: COLORS.primary,\n    marginBottom: SPACING.xs,\n  },\n  statLabel: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n  },\n  actionsCard: {\n    marginBottom: SPACING.md,\n  },\n  actionGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n  },\n  actionItem: {\n    width: \"48%\",\n    backgroundColor: COLORS.background,\n    padding: SPACING.md,\n    borderRadius: 8,\n    marginBottom: SPACING.sm,\n  },\n  actionTitle: {\n    ...TYPOGRAPHY.body,\n    fontWeight: \"600\",\n    color: COLORS.text,\n    marginBottom: SPACING.xs,\n  },\n  actionSubtitle: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n  },\n  featuresCard: {\n    marginBottom: SPACING.md,\n  },\n  featureItem: {\n    marginBottom: SPACING.md,\n  },\n  featureTitle: {\n    ...TYPOGRAPHY.body,\n    fontWeight: \"600\",\n    color: COLORS.success,\n    marginBottom: SPACING.xs,\n  },\n  featureDescription: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n  },\n});",
    "src/screens/Roles/Agent/Pro/AgentProScreen.tsx": "import React from \"react\";\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { Card } from \"@mobile/components/ui/Card\";\nimport { RoleGuard } from \"@mobile/modules/Shared/RoleGuard\";\nimport { UserRole } from \"@shared/types/feature\";\nimport { COLORS, SPACING, TYPOGRAPHY } from \"@mobile/utils/constants\";\n\nexport default function AgentProScreen({ navigation }) {\n  return (\n    <RoleGuard allowedRoles={[UserRole.AGENT]}>\n      <SafeAreaView style={styles.container}>\n        <ScrollView style={styles.scrollView}>\n          <Text style={styles.title}>Agent Pro Dashboard</Text>\n          <Text style={styles.subtitle}>Advanced CRM and deal management</Text>\n\n          <Card style={styles.pipelineCard}>\n            <Text style={styles.cardTitle}>Sales Pipeline</Text>\n            <View style={styles.pipelineStats}>\n              <View style={styles.pipelineStage}>\n                <Text style={styles.stageNumber}>12</Text>\n                <Text style={styles.stageLabel}>Leads</Text>\n              </View>\n              <View style={styles.pipelineStage}>\n                <Text style={styles.stageNumber}>8</Text>\n                <Text style={styles.stageLabel}>Qualified</Text>\n              </View>\n              <View style={styles.pipelineStage}>\n                <Text style={styles.stageNumber}>3</Text>\n                <Text style={styles.stageLabel}>Negotiation</Text>\n              </View>\n              <View style={styles.pipelineStage}>\n                <Text style={styles.stageNumber}>2</Text>\n                <Text style={styles.stageLabel}>Closed</Text>\n              </View>\n            </View>\n          </Card>\n\n          <Card style={styles.actionsCard}>\n            <Text style={styles.cardTitle}>Quick Actions</Text>\n            <View style={styles.actionGrid}>\n              <TouchableOpacity style={styles.actionItem} onPress={() => navigation.navigate(\"CRM\")}>\n                <Text style={styles.actionTitle}>CRM Pipeline</Text>\n                <Text style={styles.actionSubtitle}>Manage leads & deals</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity style={styles.actionItem} onPress={() => navigation.navigate(\"Deals\")}>\n                <Text style={styles.actionTitle}>Active Deals</Text>\n                <Text style={styles.actionSubtitle}>Track negotiations</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity style={styles.actionItem}>\n                <Text style={styles.actionTitle}>Commission</Text>\n                <Text style={styles.actionSubtitle}>Track earnings</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity style={styles.actionItem}>\n                <Text style={styles.actionTitle}>Reports</Text>\n                <Text style={styles.actionSubtitle}>Performance analytics</Text>\n              </TouchableOpacity>\n            </View>\n          </Card>\n\n          <Card style={styles.recentDealsCard}>\n            <Text style={styles.cardTitle}>Recent Deals</Text>\n            <View style={styles.dealItem}>\n              <Text style={styles.dealTitle}>Tech Startup - Series A</Text>\n              <Text style={styles.dealAmount}>\u20B950L</Text>\n              <Text style={styles.dealStatus}>In Progress</Text>\n            </View>\n            <View style={styles.dealItem}>\n              <Text style={styles.dealTitle}>Manufacturing MSME</Text>\n              <Text style={styles.dealAmount}>\u20B925L</Text>\n              <Text style={styles.dealStatus}>Closed</Text>\n            </View>\n          </Card>\n        </ScrollView>\n      </SafeAreaView>\n    </RoleGuard>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.surface,\n  },\n  scrollView: {\n    flex: 1,\n    padding: SPACING.md,\n  },\n  title: {\n    ...TYPOGRAPHY.h2,\n    color: COLORS.text,\n    marginBottom: SPACING.sm,\n  },\n  subtitle: {\n    ...TYPOGRAPHY.body,\n    color: COLORS.textSecondary,\n    marginBottom: SPACING.lg,\n  },\n  pipelineCard: {\n    marginBottom: SPACING.md,\n  },\n  cardTitle: {\n    ...TYPOGRAPHY.h3,\n    color: COLORS.text,\n    marginBottom: SPACING.md,\n  },\n  pipelineStats: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n  pipelineStage: {\n    alignItems: \"center\",\n  },\n  stageNumber: {\n    ...TYPOGRAPHY.h2,\n    color: COLORS.primary,\n    marginBottom: SPACING.xs,\n  },\n  stageLabel: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n  },\n  actionsCard: {\n    marginBottom: SPACING.md,\n  },\n  actionGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n  },\n  actionItem: {\n    width: \"48%\",\n    backgroundColor: COLORS.background,\n    padding: SPACING.md,\n    borderRadius: 8,\n    marginBottom: SPACING.sm,\n  },\n  actionTitle: {\n    ...TYPOGRAPHY.body,\n    fontWeight: \"600\",\n    color: COLORS.text,\n    marginBottom: SPACING.xs,\n  },\n  actionSubtitle: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n  },\n  recentDealsCard: {\n    marginBottom: SPACING.md,\n  },\n  dealItem: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingVertical: SPACING.sm,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#f0f0f0\",\n  },\n  dealTitle: {\n    ...TYPOGRAPHY.body,\n    color: COLORS.text,\n    flex: 1,\n  },\n  dealAmount: {\n    ...TYPOGRAPHY.body,\n    fontWeight: \"600\",\n    color: COLORS.primary,\n    marginRight: SPACING.sm,\n  },\n  dealStatus: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.success,\n  },\n});",
    // ===== PRIORITY 3: Payment Integration Files =====
    "src/modules/Payment/PaymentCheckout.tsx": "import React, { useState } from \"react\";\nimport { View, Text, StyleSheet, Alert } from \"react-native\";\nimport { Card } from \"@mobile/components/ui/Card\";\nimport { Button } from \"@mobile/components/ui/Button\";\nimport { apiClient } from \"@mobile/api/apiClient\";\nimport { useAuth } from \"@mobile/store/authStore\";\nimport { COLORS, SPACING, TYPOGRAPHY } from \"@mobile/utils/constants\";\n\ninterface PaymentCheckoutProps {\n  amount: number;\n  description: string;\n  onSuccess: (paymentId: string) => void;\n  onFailure: (error: string) => void;\n}\n\nexport function PaymentCheckout({ amount, description, onSuccess, onFailure }: PaymentCheckoutProps) {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n\n  const initiatePayment = async () => {\n    if (!user) {\n      Alert.alert(\"Error\", \"Please login to continue\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Create order on backend\n      const order = await apiClient.post<{\n        id: string;\n        amount: number;\n        currency: string;\n        key: string;\n      }>(\"/payments/orders\", {\n        amount: amount * 100, // Convert to paise\n        currency: \"INR\",\n        description,\n      });\n\n      // In a real app, you would integrate with Razorpay React Native SDK here\n      // For now, simulate payment success\n      setTimeout(() => {\n        onSuccess(order.id);\n        setLoading(false);\n      }, 2000);\n\n    } catch (error: any) {\n      setLoading(false);\n      onFailure(error.message || \"Payment failed\");\n    }\n  };\n\n  return (\n    <Card style={styles.container}>\n      <Text style={styles.title}>Payment Details</Text>\n      \n      <View style={styles.amountContainer}>\n        <Text style={styles.amountLabel}>Amount to Pay</Text>\n        <Text style={styles.amount}>\u20B9{amount.toLocaleString()}</Text>\n      </View>\n\n      <Text style={styles.description}>{description}</Text>\n\n      <View style={styles.userInfo}>\n        <Text style={styles.userLabel}>Paying as:</Text>\n        <Text style={styles.userName}>{user?.name}</Text>\n        <Text style={styles.userEmail}>{user?.email}</Text>\n      </View>\n\n      <Button\n        onPress={initiatePayment}\n        title={loading ? \"Processing...\" : \"Pay Now\"}\n        loading={loading}\n        style={styles.payButton}\n      />\n\n      <Text style={styles.secureNote}>\n        \uD83D\uDD12 Your payment is secured with 256-bit SSL encryption\n      </Text>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: SPACING.md,\n  },\n  title: {\n    ...TYPOGRAPHY.h3,\n    color: COLORS.text,\n    textAlign: \"center\",\n    marginBottom: SPACING.lg,\n  },\n  amountContainer: {\n    alignItems: \"center\",\n    marginBottom: SPACING.lg,\n    padding: SPACING.md,\n    backgroundColor: COLORS.surface,\n    borderRadius: 8,\n  },\n  amountLabel: {\n    ...TYPOGRAPHY.body,\n    color: COLORS.textSecondary,\n    marginBottom: SPACING.sm,\n  },\n  amount: {\n    ...TYPOGRAPHY.h1,\n    color: COLORS.primary,\n    fontWeight: \"700\",\n  },\n  description: {\n    ...TYPOGRAPHY.body,\n    color: COLORS.text,\n    textAlign: \"center\",\n    marginBottom: SPACING.lg,\n    lineHeight: 22,\n  },\n  userInfo: {\n    backgroundColor: COLORS.surface,\n    padding: SPACING.md,\n    borderRadius: 8,\n    marginBottom: SPACING.lg,\n  },\n  userLabel: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n    marginBottom: SPACING.sm,\n  },\n  userName: {\n    ...TYPOGRAPHY.body,\n    fontWeight: \"600\",\n    color: COLORS.text,\n  },\n  userEmail: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n  },\n  payButton: {\n    marginBottom: SPACING.md,\n  },\n  secureNote: {\n    ...TYPOGRAPHY.caption,\n    color: COLORS.textSecondary,\n    textAlign: \"center\",\n  },\n});",
    "src/screens/Payment/CheckoutScreen.tsx": "import React, { useState } from \"react\";\nimport { View, StyleSheet, Alert } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { PaymentCheckout } from \"@mobile/modules/Payment/PaymentCheckout\";\nimport { COLORS } from \"@mobile/utils/constants\";\n\nexport default function CheckoutScreen({ route, navigation }) {\n  const { amount, description, plan } = route.params || {};\n\n  const handlePaymentSuccess = (paymentId: string) => {\n    Alert.alert(\n      \"Payment Successful!\",\n      \"Your payment has been processed successfully.\",\n      [\n        {\n          text: \"Continue\",\n          onPress: () => {\n            // Navigate to success screen or back to dashboard\n            navigation.navigate(\"PaymentSuccess\", { paymentId, plan });\n          },\n        },\n      ]\n    );\n  };\n\n  const handlePaymentFailure = (error: string) => {\n    Alert.alert(\n      \"Payment Failed\",\n      error,\n      [\n        {\n          text: \"Retry\",\n          onPress: () => {\n            // Allow user to retry payment\n          },\n        },\n        {\n          text: \"Cancel\",\n          onPress: () => navigation.goBack(),\n          style: \"cancel\",\n        },\n      ]\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <PaymentCheckout\n        amount={amount || 99}\n        description={description || \"MSMEBazaar Pro Subscription\"}\n        onSuccess={handlePaymentSuccess}\n        onFailure={handlePaymentFailure}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background,\n  },\n});",
    // ===== PRIORITY 4: Navigation Refactoring =====
    "src/navigation/StackNavigators/BuyerStackNavigator.tsx": "import React from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport BuyerFreeScreen from \"@mobile/screens/Roles/Buyer/Free/BuyerFreeScreen\";\nimport BuyerProScreen from \"@mobile/screens/Roles/Buyer/Pro/BuyerProScreen\";\nimport { useAuth } from \"@mobile/store/authStore\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function BuyerStackNavigator() {\n  const { user } = useAuth();\n  const initialRoute = user?.isPro ? \"BuyerPro\" : \"BuyerFree\";\n\n  return (\n    <Stack.Navigator initialRouteName={initialRoute}>\n      <Stack.Screen\n        name=\"BuyerFree\"\n        component={BuyerFreeScreen}\n        options={{ title: \"Buyer Dashboard\" }}\n      />\n      <Stack.Screen\n        name=\"BuyerPro\"\n        component={BuyerProScreen}\n        options={{ title: \"Buyer Pro Dashboard\" }}\n      />\n    </Stack.Navigator>\n  );\n}",
    "src/navigation/StackNavigators/SellerStackNavigator.tsx": "import React from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport SellerFreeScreen from \"@mobile/screens/Roles/Seller/Free/SellerFreeScreen\";\nimport SellerProScreen from \"@mobile/screens/Roles/Seller/Pro/SellerProScreen\";\nimport { useAuth } from \"@mobile/store/authStore\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function SellerStackNavigator() {\n  const { user } = useAuth();\n  const initialRoute = user?.isPro ? \"SellerPro\" : \"SellerFree\";\n\n  return (\n    <Stack.Navigator initialRouteName={initialRoute}>\n      <Stack.Screen\n        name=\"SellerFree\"\n        component={SellerFreeScreen}\n        options={{ title: \"Seller Dashboard\" }}\n      />\n      <Stack.Screen\n        name=\"SellerPro\"\n        component={SellerProScreen}\n        options={{ title: \"Seller Pro Dashboard\" }}\n      />\n    </Stack.Navigator>\n  );\n}",
    // ===== PRIORITY 5: Shared Modules with Frontend =====
    "src/modules/shared/BusinessLoans/LoanApplicationForm.tsx": "import React, { useState } from \"react\";\nimport { View, Text, TextInput, StyleSheet, ScrollView } from \"react-native\";\nimport { Card } from \"@mobile/components/ui/Card\";\nimport { Button } from \"@mobile/components/ui/Button\";\nimport { apiClient } from \"@mobile/api/apiClient\";\nimport { COLORS, SPACING, TYPOGRAPHY } from \"@mobile/utils/constants\";\n\n// Shared with frontend - matches your webapp's loan application structure\ninterface LoanApplicationData {\n  businessName: string;\n  businessType: string;\n  annualTurnover: number;\n  loanAmount: number;\n  purpose: string;\n  gstNumber?: string;\n  panNumber: string;\n}\n\nexport function LoanApplicationForm({ onSuccess }: { onSuccess: (applicationId: string) => void }) {\n  const [formData, setFormData] = useState<LoanApplicationData>({\n    businessName: \"\",\n    businessType: \"\",\n    annualTurnover: 0,\n    loanAmount: 0,\n    purpose: \"\",\n    gstNumber: \"\",\n    panNumber: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n\n  const submitApplication = async () => {\n    setLoading(true);\n    try {\n      const response = await apiClient.post<{ id: string }>(\"/loans/applications\", formData);\n      onSuccess(response.id);\n    } catch (error) {\n      console.error(\"Loan application failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateField = (field: keyof LoanApplicationData, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <Card>\n        <Text style={styles.title}>Business Loan Application</Text>\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Business Name\"\n          value={formData.businessName}\n          onChangeText={(value) => updateField(\"businessName\", value)}\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Business Type\"\n          value={formData.businessType}\n          onChangeText={(value) => updateField(\"businessType\", value)}\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Annual Turnover\"\n          value={formData.annualTurnover.toString()}\n          onChangeText={(value) => updateField(\"annualTurnover\", parseFloat(value) || 0)}\n          keyboardType=\"numeric\"\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Loan Amount Required\"\n          value={formData.loanAmount.toString()}\n          onChangeText={(value) => updateField(\"loanAmount\", parseFloat(value) || 0)}\n          keyboardType=\"numeric\"\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"Purpose of Loan\"\n          value={formData.purpose}\n          onChangeText={(value) => updateField(\"purpose\", value)}\n          multiline\n          numberOfLines={3}\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"GST Number (Optional)\"\n          value={formData.gstNumber}\n          onChangeText={(value) => updateField(\"gstNumber\", value)}\n        />\n        \n        <TextInput\n          style={styles.input}\n          placeholder=\"PAN Number\"\n          value={formData.panNumber}\n          onChangeText={(value) => updateField(\"panNumber\", value)}\n        />\n        \n        <Button\n          onPress={submitApplication}\n          title=\"Submit Application\"\n          loading={loading}\n          style={styles.submitButton}\n        />\n      </Card>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: SPACING.md,\n  },\n  title: {\n    ...TYPOGRAPHY.h3,\n    color: COLORS.text,\n    marginBottom: SPACING.lg,\n    textAlign: \"center\",\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: \"#e5e7eb\",\n    borderRadius: 6,\n    padding: SPACING.md,\n    marginBottom: SPACING.md,\n    fontSize: 16,\n    backgroundColor: \"#fff\",\n  },\n  submitButton: {\n    marginTop: SPACING.md,\n  },\n});",
    "src/modules/shared/Recommendation/RecommendationEngine.ts": "import { apiClient } from \"@mobile/api/apiClient\";\nimport { useAuth } from \"@mobile/store/authStore\";\n\n// Shared recommendation logic matching your frontend recommendation service\nexport interface Recommendation {\n  id: string;\n  title: string;\n  description: string;\n  score: number;\n  type: \"listing\" | \"business\" | \"opportunity\";\n}\n\nexport class RecommendationEngine {\n  static async getRecommendations(userId: string, userRole: string): Promise<Recommendation[]> {\n    try {\n      const response = await apiClient.get<{ items: Recommendation[] }>(\n        `/recommendations/listings?userId=${userId}&role=${userRole}&k=10`\n      );\n      return response.items || [];\n    } catch (error) {\n      console.error(\"Failed to fetch recommendations:\", error);\n      return [];\n    }\n  }\n\n  static async logUserEvent(eventType: string, itemId: string, userId: string) {\n    try {\n      await apiClient.post(\"/recommendations/events\", {\n        event_type: eventType,\n        user_id: userId,\n        item_id: itemId,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error(\"Failed to log user event:\", error);\n    }\n  }\n\n  static async getPersonalizedListings(userId: string, role: string) {\n    return this.getRecommendations(userId, role);\n  }\n}\n\n// React hook for easy component integration\nexport function useRecommendations() {\n  const { user } = useAuth();\n  \n  const getRecommendations = async () => {\n    if (!user) return [];\n    return RecommendationEngine.getRecommendations(user.id, user.roles[0]);\n  };\n\n  const logEvent = async (eventType: string, itemId: string) => {\n    if (!user) return;\n    return RecommendationEngine.logUserEvent(eventType, itemId, user.id);\n  };\n\n  return { getRecommendations, logEvent };\n}",
};
// Script execution functions
function createAdditionalFolders() {
    console.log("📁 Creating additional folders for Phase 2...");
    for (var _i = 0, additionalFolders_1 = additionalFolders; _i < additionalFolders_1.length; _i++) {
        var folder = additionalFolders_1[_i];
        var folderPath = path.join(MOBILE_ROOT, folder);
        if (!fs.existsSync(folderPath)) {
            fs.mkdirSync(folderPath, { recursive: true });
            console.log("   \u2705 Created: ".concat(folder));
        }
    }
}
function createPhase2Files() {
    console.log("\n📄 Creating Phase 2 files...");
    var priority = 1;
    // Priority 1: Auth screens
    console.log("\n\uD83D\uDD10 PRIORITY ".concat(priority++, ": Auth Screens"));
    // Priority 2: Role screens
    console.log("\n\uD83D\uDC65 PRIORITY ".concat(priority++, ": Role-Specific Screens"));
    // Priority 3: Payment integration
    console.log("\n\uD83D\uDCB3 PRIORITY ".concat(priority++, ": Payment Integration"));
    // Priority 4: Navigation refactoring
    console.log("\n\uD83E\uDDED PRIORITY ".concat(priority++, ": Navigation Refactoring"));
    // Priority 5: Shared modules
    console.log("\n\uD83D\uDD04 PRIORITY ".concat(priority++, ": Shared Modules"));
    for (var _i = 0, _a = Object.entries(phase2Files); _i < _a.length; _i++) {
        var _b = _a[_i], filePath = _b[0], content = _b[1];
        var fullPath = path.join(MOBILE_ROOT, filePath);
        var dir = path.dirname(fullPath);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        fs.writeFileSync(fullPath, content);
        console.log("   \u2705 Created: ".concat(filePath));
    }
}
// Main Phase 2 scaffold function
function scaffoldMobilePhase2() {
    console.log("🚀 Starting MSMEBazaar Mobile App - Phase 2 Enhancement...");
    if (!fs.existsSync(MOBILE_ROOT)) {
        console.error("❌ Mobile root directory not found. Please run the first scaffold script first.");
        process.exit(1);
    }
    try {
        createAdditionalFolders();
        createPhase2Files();
        console.log("\n\uD83C\uDF89 Phase 2 Enhancement completed successfully!\n\n\uD83D\uDCF1 New features added:\n\u2705 Register + ForgotPassword screens\n\u2705 All role-specific screens (Free + Pro)\n\u2705 Payment integration with Razorpay\n\u2705 Refactored navigation system\n\u2705 Shared modules with frontend webapp\n\n\uD83D\uDD27 Next steps:\n1. cd ".concat(MOBILE_ROOT, "\n2. npm install (if new dependencies)\n3. npm start\n\n\uD83D\uDCDA Integration with webapp features:\n\u2705 Buyer service - shared recommendation engine\n\u2705 Seller service - shared product management\n\u2705 Payment service - unified checkout flow\n\u2705 Loan service - shared application forms\n\u2705 Authentication - shared session management\n\n\uD83D\uDE80 Your mobile app now has full feature parity with your webapp!\n    "));
    }
    catch (error) {
        console.error("❌ Phase 2 scaffold failed:", error.message);
        process.exit(1);
    }
}
// Run Phase 2 scaffold
scaffoldMobilePhase2();
